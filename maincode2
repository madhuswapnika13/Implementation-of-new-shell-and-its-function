#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;string.h&gt;
#include &lt;signal.h&gt;
#include &lt;pwd.h&gt;
#include &lt;glob.h&gt;
#include &lt;sys/wait.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;

#define NR_JOBS 20
#define PATH_BUFSIZE 1024
#define COMMAND_BUFSIZE 1024
#define TOKEN_BUFSIZE 64
#define TOKEN_DELIMITERS &quot; \t\r\n\a&quot;

#define BACKGROUND_EXECUTION 0
#define FOREGROUND_EXECUTION 1
#define PIPELINE_EXECUTION 2

#define COMMAND_EXTERNAL 0
#define COMMAND_EXIT 1
#define COMMAND_CD 2

#define COMMAND_JOBS 3
#define COMMAND_FG 4
#define COMMAND_BG 5
#define COMMAND_KILL 6
#define COMMAND_EXPORT 7
#define COMMAND_UNSET 8

#define STATUS_RUNNING 0
#define STATUS_DONE 1
#define STATUS_SUSPENDED 2
#define STATUS_CONTINUED 3
#define STATUS_TERMINATED 4

#define PROC_FILTER_ALL 0
#define PROC_FILTER_DONE 1
#define PROC_FILTER_REMAINING 2

#define COLOR_NONE &quot;\033[m&quot;
#define COLOR_RED &quot;\033[1;37;41m&quot;
#define COLOR_YELLOW &quot;\033[1;33m&quot;
#define COLOR_CYAN &quot;\033[0;36m&quot;
#define COLOR_GREEN &quot;\033[0;32;32m&quot;
#define COLOR_GRAY &quot;\033[1;30m&quot;

const char* STATUS_STRING[] = {
&quot;running&quot;,
&quot;done&quot;,
&quot;suspended&quot;,
&quot;continued&quot;,
&quot;terminated&quot;
};

struct process {
char *command;

int argc;
char **argv;
char *input_path;
char *output_path;
pid_t pid;
int type;
int status;
struct process *next;
};

struct job {
int id;
struct process *root;
char *command;
pid_t pgid;
int mode;
};

struct shell_info {
char cur_user[TOKEN_BUFSIZE];
char cur_dir[PATH_BUFSIZE];
char pw_dir[PATH_BUFSIZE];
struct job *jobs[NR_JOBS + 1];
};

struct shell_info *shell;

int get_job_id_by_pid(int pid) {
int i;
struct process *proc;

for (i = 1; i &lt;= NR_JOBS; i++) {
if (shell-&gt;jobs[i] != NULL) {
for (proc = shell-&gt;jobs[i]-&gt;root; proc != NULL; proc = proc-&gt;next) {

if (proc-&gt;pid == pid) {
return i;
}
}
}
}

return -1;
}

struct job* get_job_by_id(int id) {
if (id &gt; NR_JOBS) {
return NULL;
}

return shell-&gt;jobs[id];
}

int get_pgid_by_job_id(int id) {
struct job *job = get_job_by_id(id);

if (job == NULL) {
return -1;
}

return job-&gt;pgid;
}

int get_proc_count(int id, int filter) {
if (id &gt; NR_JOBS || shell-&gt;jobs[id] == NULL) {
return -1;
}

int count = 0;

struct process *proc;
for (proc = shell-&gt;jobs[id]-&gt;root; proc != NULL; proc = proc-&gt;next) {
if (filter == PROC_FILTER_ALL ||
(filter == PROC_FILTER_DONE &amp;&amp; proc-&gt;status == STATUS_DONE) ||
(filter == PROC_FILTER_REMAINING &amp;&amp; proc-&gt;status != STATUS_DONE))
{
count++;
}
}

return count;
}

int get_next_job_id() {
int i;

for (i = 1; i &lt;= NR_JOBS; i++) {
if (shell-&gt;jobs[i] == NULL) {
return i;
}
}

return -1;
}

int print_processes_of_job(int id) {
if (id &gt; NR_JOBS || shell-&gt;jobs[id] == NULL) {
return -1;
}

printf(&quot;[%d]&quot;, id);

struct process *proc;
for (proc = shell-&gt;jobs[id]-&gt;root; proc != NULL; proc = proc-&gt;next) {

printf(&quot; %d&quot;, proc-&gt;pid);
}
printf(&quot;\n&quot;);

return 0;
}

int print_job_status(int id) {
if (id &gt; NR_JOBS || shell-&gt;jobs[id] == NULL) {
return -1;
}

printf(&quot;[%d]&quot;, id);

struct process *proc;
for (proc = shell-&gt;jobs[id]-&gt;root; proc != NULL; proc = proc-&gt;next) {
printf(&quot;\t%d\t%s\t%s&quot;, proc-&gt;pid,
STATUS_STRING[proc-&gt;status], proc-&gt;command);
if (proc-&gt;next != NULL) {
printf(&quot;|\n&quot;);
} else {
printf(&quot;\n&quot;);
}
}

return 0;
}

int release_job(int id) {
if (id &gt; NR_JOBS || shell-&gt;jobs[id] == NULL) {
return -1;
}

struct job *job = shell-&gt;jobs[id];

struct process *proc, *tmp;
for (proc = job-&gt;root; proc != NULL; ) {
tmp = proc-&gt;next;
free(proc-&gt;command);
free(proc-&gt;argv);
free(proc-&gt;input_path);
free(proc-&gt;output_path);
free(proc);
proc = tmp;
}

free(job-&gt;command);
free(job);

return 0;
}

int insert_job(struct job *job) {
int id = get_next_job_id();

if (id &lt; 0) {
return -1;
}

job-&gt;id = id;
shell-&gt;jobs[id] = job;
return id;
}

int remove_job(int id) {
if (id &gt; NR_JOBS || shell-&gt;jobs[id] == NULL) {
return -1;
}

release_job(id);
shell-&gt;jobs[id] = NULL;

return 0;
}

int is_job_completed(int id) {
if (id &gt; NR_JOBS || shell-&gt;jobs[id] == NULL) {
return 0;
}

struct process *proc;
for (proc = shell-&gt;jobs[id]-&gt;root; proc != NULL; proc = proc-&gt;next) {
if (proc-&gt;status != STATUS_DONE) {
return 0;
}
}

return 1;
}

int set_process_status(int pid, int status) {
int i;
struct process *proc;

for (i = 1; i &lt;= NR_JOBS; i++) {
if (shell-&gt;jobs[i] == NULL) {
continue;
}
for (proc = shell-&gt;jobs[i]-&gt;root; proc != NULL; proc = proc-&gt;next) {
if (proc-&gt;pid == pid) {
proc-&gt;status = status;
return 0;
}

}
}

return -1;
}

int set_job_status(int id, int status) {
if (id &gt; NR_JOBS || shell-&gt;jobs[id] == NULL) {
return -1;
}

int i;
struct process *proc;

for (proc = shell-&gt;jobs[id]-&gt;root; proc != NULL; proc = proc-&gt;next) {
if (proc-&gt;status != STATUS_DONE) {
proc-&gt;status = status;
}
}

return 0;
}

int wait_for_pid(int pid) {
int status = 0;

waitpid(pid, &amp;status, WUNTRACED);
if (WIFEXITED(status)) {
set_process_status(pid, STATUS_DONE);
} else if (WIFSIGNALED(status)) {
set_process_status(pid, STATUS_TERMINATED);
} else if (WSTOPSIG(status)) {
status = -1;
set_process_status(pid, STATUS_SUSPENDED);

}

return status;
}

int wait_for_job(int id) {
if (id &gt; NR_JOBS || shell-&gt;jobs[id] == NULL) {
return -1;
}

int proc_count = get_proc_count(id, PROC_FILTER_REMAINING);
int wait_pid = -1, wait_count = 0;
int status = 0;

do {
wait_pid = waitpid(-shell-&gt;jobs[id]-&gt;pgid, &amp;status, WUNTRACED);
wait_count++;

if (WIFEXITED(status)) {
set_process_status(wait_pid, STATUS_DONE);
} else if (WIFSIGNALED(status)) {
set_process_status(wait_pid, STATUS_TERMINATED);
} else if (WSTOPSIG(status)) {
status = -1;
set_process_status(wait_pid, STATUS_SUSPENDED);
if (wait_count == proc_count) {
print_job_status(id);
}
}
} while (wait_count &lt; proc_count);

return status;
}

int get_command_type(char *command) {
if (strcmp(command, &quot;exit&quot;) == 0) {
return COMMAND_EXIT;
} else if (strcmp(command, &quot;cd&quot;) == 0) {
return COMMAND_CD;
} else if (strcmp(command, &quot;jobs&quot;) == 0) {
return COMMAND_JOBS;
} else if (strcmp(command, &quot;fg&quot;) == 0) {
return COMMAND_FG;
} else if (strcmp(command, &quot;bg&quot;) == 0) {
return COMMAND_BG;
} else if (strcmp(command, &quot;kill&quot;) == 0) {
return COMMAND_KILL;
} else if (strcmp(command, &quot;export&quot;) == 0) {
return COMMAND_EXPORT;
} else if (strcmp(command, &quot;unset&quot;) == 0) {
return COMMAND_UNSET;
} else {
return COMMAND_EXTERNAL;
}
}

char* helper_strtrim(char* line) {
char *head = line, *tail = line + strlen(line);

while (*head == &#39; &#39;) {
head++;
}
while (*tail == &#39; &#39;) {
tail--;
}
*(tail + 1) = &#39;\0&#39;;

return head;

}

void mysh_update_cwd_info() {
getcwd(shell-&gt;cur_dir, sizeof(shell-&gt;cur_dir));
}

int mysh_cd(int argc, char** argv) {
if (argc == 1) {
chdir(shell-&gt;pw_dir);
mysh_update_cwd_info();
return 0;
}

if (chdir(argv[1]) == 0) {
mysh_update_cwd_info();
return 0;
} else {
printf(&quot;aarthi: cd %s: No such file or directory\n&quot;, argv[1]);
return 0;
}
}

int mysh_jobs(int argc, char **argv) {
int i;

for (i = 0; i &lt; NR_JOBS; i++) {
if (shell-&gt;jobs[i] != NULL) {
print_job_status(i);
}
}

return 0;
}

int mysh_fg(int argc, char **argv) {
if (argc &lt; 2) {
printf(&quot;usage: fg &lt;pid&gt;\n&quot;);
return -1;
}

int status;
pid_t pid;
int job_id = -1;

if (argv[1][0] == &#39;%&#39;) {
job_id = atoi(argv[1] + 1);
pid = get_pgid_by_job_id(job_id);
if (pid &lt; 0) {
printf(&quot;aarthi: fg %s: no such job\n&quot;, argv[1]);
return -1;
}
} else {
pid = atoi(argv[1]);
}

if (kill(-pid, SIGCONT) &lt; 0) {
printf(&quot;aarthi: fg %d: job not found\n&quot;, pid);
return -1;
}

tcsetpgrp(0, pid);

if (job_id &gt; 0) {
set_job_status(job_id, STATUS_CONTINUED);
print_job_status(job_id);
if (wait_for_job(job_id) &gt;= 0) {
remove_job(job_id);
}

} else {
wait_for_pid(pid);
}

signal(SIGTTOU, SIG_IGN);
tcsetpgrp(0, getpid());
signal(SIGTTOU, SIG_DFL);

return 0;
}

int mysh_bg(int argc, char **argv) {
if (argc &lt; 2) {
printf(&quot;usage: bg &lt;pid&gt;\n&quot;);
return -1;
}

pid_t pid;
int job_id = -1;

if (argv[1][0] == &#39;%&#39;) {
job_id = atoi(argv[1] + 1);
pid = get_pgid_by_job_id(job_id);
if (pid &lt; 0) {
printf(&quot;aarthi: bg %s: no such job\n&quot;, argv[1]);
return -1;
}
} else {
pid = atoi(argv[1]);
}

if (kill(-pid, SIGCONT) &lt; 0) {
printf(&quot;aarthi: bg %d: job not found\n&quot;, pid);
return -1;

}

if (job_id &gt; 0) {
set_job_status(job_id, STATUS_CONTINUED);
print_job_status(job_id);
}

return 0;
}

int mysh_kill(int argc, char **argv) {
if (argc &lt; 2) {
printf(&quot;usage: kill &lt;pid&gt;\n&quot;);
return -1;
}

pid_t pid;
int job_id = -1;

if (argv[1][0] == &#39;%&#39;) {
job_id = atoi(argv[1] + 1);
pid = get_pgid_by_job_id(job_id);
if (pid &lt; 0) {
printf(&quot;aarthi: kill %s: no such job\n&quot;, argv[1]);
return -1;
}
pid = -pid;
} else {
pid = atoi(argv[1]);
}

if (kill(pid, SIGKILL) &lt; 0) {
printf(&quot;aarthi: kill %d: job not found\n&quot;, pid);
return 0;

}

if (job_id &gt; 0) {
set_job_status(job_id, STATUS_TERMINATED);
print_job_status(job_id);
if (wait_for_job(job_id) &gt;= 0) {
remove_job(job_id);
}
}

return 1;
}

int mysh_export(int argc, char **argv) {
if (argc &lt; 2) {
printf(&quot;usage: export KEY=VALUE\n&quot;);
return -1;
}

return putenv(argv[1]);
}

int mysh_unset(int argc, char **argv) {
if (argc &lt; 2) {
printf(&quot;usage: unset KEY\n&quot;);
return -1;
}

return unsetenv(argv[1]);
}

int mysh_exit() {
printf(&quot;Goodbye!\n&quot;);
exit(0);

}

void check_zombie() {
int status, pid;
while ((pid = waitpid(-1, &amp;status, WNOHANG|WUNTRACED|WCONTINUED)) &gt;
0) {
if (WIFEXITED(status)) {
set_process_status(pid, STATUS_DONE);
} else if (WIFSTOPPED(status)) {
set_process_status(pid, STATUS_SUSPENDED);
} else if (WIFCONTINUED(status)) {
set_process_status(pid, STATUS_CONTINUED);
}

int job_id = get_job_id_by_pid(pid);
if (job_id &gt; 0 &amp;&amp; is_job_completed(job_id)) {
print_job_status(job_id);
remove_job(job_id);
}
}
}

void sigint_handler(int signal) {
printf(&quot;\n&quot;);
}

int mysh_execute_builtin_command(struct process *proc) {
int status = 1;

switch (proc-&gt;type) {
case COMMAND_EXIT:
mysh_exit();
break;
case COMMAND_CD:

mysh_cd(proc-&gt;argc, proc-&gt;argv);
break;
case COMMAND_JOBS:
mysh_jobs(proc-&gt;argc, proc-&gt;argv);
break;
case COMMAND_FG:
mysh_fg(proc-&gt;argc, proc-&gt;argv);
break;
case COMMAND_BG:
mysh_bg(proc-&gt;argc, proc-&gt;argv);
break;
case COMMAND_KILL:
mysh_kill(proc-&gt;argc, proc-&gt;argv);
break;
case COMMAND_EXPORT:
mysh_export(proc-&gt;argc, proc-&gt;argv);
break;
case COMMAND_UNSET:
mysh_unset(proc-&gt;argc, proc-&gt;argv);
break;
default:
status = 0;
break;
}

return status;
}

int mysh_launch_process(struct job *job, struct process *proc, int in_fd, int out_fd, int
mode) {
proc-&gt;status = STATUS_RUNNING;
if (proc-&gt;type != COMMAND_EXTERNAL &amp;&amp;
mysh_execute_builtin_command(proc)) {
return 0;

}

pid_t childpid;
int status = 0;

childpid = fork();

if (childpid &lt; 0) {
return -1;
} else if (childpid == 0) {
signal(SIGINT, SIG_DFL);
signal(SIGQUIT, SIG_DFL);
signal(SIGTSTP, SIG_DFL);
signal(SIGTTIN, SIG_DFL);
signal(SIGTTOU, SIG_DFL);
signal(SIGCHLD, SIG_DFL);

proc-&gt;pid = getpid();
if (job-&gt;pgid &gt; 0) {
setpgid(0, job-&gt;pgid);
} else {
job-&gt;pgid = proc-&gt;pid;
setpgid(0, job-&gt;pgid);
}

if (in_fd != 0) {
dup2(in_fd, 0);
close(in_fd);
}

if (out_fd != 1) {
dup2(out_fd, 1);
close(out_fd);
}

if (execvp(proc-&gt;argv[0], proc-&gt;argv) &lt; 0) {
printf(&quot;aarthi: %s: command not found\n&quot;, proc-&gt;argv[0]);
exit(0);
}

exit(0);
} else {
proc-&gt;pid = childpid;
if (job-&gt;pgid &gt; 0) {
setpgid(childpid, job-&gt;pgid);
} else {
job-&gt;pgid = proc-&gt;pid;
setpgid(childpid, job-&gt;pgid);
}

if (mode == FOREGROUND_EXECUTION) {
tcsetpgrp(0, job-&gt;pgid);
status = wait_for_job(job-&gt;id);
signal(SIGTTOU, SIG_IGN);
tcsetpgrp(0, getpid());
signal(SIGTTOU, SIG_DFL);
}
}

return status;
}

int mysh_launch_job(struct job *job) {
struct process *proc;
int status = 0, in_fd = 0, fd[2], job_id = -1;

check_zombie();
if (job-&gt;root-&gt;type == COMMAND_EXTERNAL) {

job_id = insert_job(job);
}

for (proc = job-&gt;root; proc != NULL; proc = proc-&gt;next) {
if (proc == job-&gt;root &amp;&amp; proc-&gt;input_path != NULL) {
in_fd = open(proc-&gt;input_path, O_RDONLY);
if (in_fd &lt; 0) {
printf(&quot;aarthi: no such file or directory: %s\n&quot;, proc-&gt;input_path);
remove_job(job_id);
return -1;
}
}
if (proc-&gt;next != NULL) {
pipe(fd);
status = mysh_launch_process(job, proc, in_fd, fd[1],
PIPELINE_EXECUTION);
close(fd[1]);
in_fd = fd[0];
} else {
int out_fd = 1;
if (proc-&gt;output_path != NULL) {
out_fd = open(proc-&gt;output_path, O_CREAT|O_WRONLY,
S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH);
if (out_fd &lt; 0) {
out_fd = 1;
}
}
status = mysh_launch_process(job, proc, in_fd, out_fd, job-&gt;mode);
}
}

if (job-&gt;root-&gt;type == COMMAND_EXTERNAL) {
if (status &gt;= 0 &amp;&amp; job-&gt;mode == FOREGROUND_EXECUTION) {
remove_job(job_id);

} else if (job-&gt;mode == BACKGROUND_EXECUTION) {
print_processes_of_job(job_id);
}
}

return status;
}

struct process* mysh_parse_command_segment(char *segment) {
int bufsize = TOKEN_BUFSIZE;
int position = 0;
char *command = strdup(segment);
char *token;
char **tokens = (char**) malloc(bufsize * sizeof(char*));

if (!tokens) {
fprintf(stderr, &quot;aarthi: allocation error\n&quot;);
exit(EXIT_FAILURE);
}

token = strtok(segment, TOKEN_DELIMITERS);
while (token != NULL) {
glob_t glob_buffer;
int glob_count = 0;
if (strchr(token, &#39;*&#39;) != NULL || strchr(token, &#39;?&#39;) != NULL) {
glob(token, 0, NULL, &amp;glob_buffer);
glob_count = glob_buffer.gl_pathc;
}

if (position + glob_count &gt;= bufsize) {
bufsize += TOKEN_BUFSIZE;
bufsize += glob_count;
tokens = (char**) realloc(tokens, bufsize * sizeof(char*));
if (!tokens) {

fprintf(stderr, &quot;aarthi: allocation error\n&quot;);
exit(EXIT_FAILURE);
}
}

if (glob_count &gt; 0) {
int i;
for (i = 0; i &lt; glob_count; i++) {
tokens[position++] = strdup(glob_buffer.gl_pathv[i]);
}
globfree(&amp;glob_buffer);
} else {
tokens[position] = token;
position++;
}

token = strtok(NULL, TOKEN_DELIMITERS);
}

int i = 0, argc = 0;
char *input_path = NULL, *output_path = NULL;
while (i &lt; position) {
if (tokens[i][0] == &#39;&lt;&#39; || tokens[i][0] == &#39;&gt;&#39;) {
break;
}
i++;
}
argc = i;

for (; i &lt; position; i++) {
if (tokens[i][0] == &#39;&lt;&#39;) {
if (strlen(tokens[i]) == 1) {
input_path = (char *) malloc((strlen(tokens[i + 1]) + 1) * sizeof(char));
strcpy(input_path, tokens[i + 1]);

i++;
} else {
input_path = (char *) malloc(strlen(tokens[i]) * sizeof(char));
strcpy(input_path, tokens[i] + 1);
}
} else if (tokens[i][0] == &#39;&gt;&#39;) {
if (strlen(tokens[i]) == 1) {
output_path = (char *) malloc((strlen(tokens[i + 1]) + 1) * sizeof(char));
strcpy(output_path, tokens[i + 1]);
i++;
} else {
output_path = (char *) malloc(strlen(tokens[i]) * sizeof(char));
strcpy(output_path, tokens[i] + 1);
}
} else {
break;
}
}

for (i = argc; i &lt;= position; i++) {
tokens[i] = NULL;
}

struct process *new_proc = (struct process*) malloc(sizeof(struct process));
new_proc-&gt;command = command;
new_proc-&gt;argv = tokens;
new_proc-&gt;argc = argc;
new_proc-&gt;input_path = input_path;
new_proc-&gt;output_path = output_path;
new_proc-&gt;pid = -1;
new_proc-&gt;type = get_command_type(tokens[0]);
new_proc-&gt;next = NULL;
return new_proc;
}

struct job* mysh_parse_command(char *line) {
line = helper_strtrim(line);
char *command = strdup(line);

struct process *root_proc = NULL, *proc = NULL;
char *line_cursor = line, *c = line, *seg;
int seg_len = 0, mode = FOREGROUND_EXECUTION;

if (line[strlen(line) - 1] == &#39;&amp;&#39;) {
mode = BACKGROUND_EXECUTION;
line[strlen(line) - 1] = &#39;\0&#39;;
}

while (1) {
if (*c == &#39;\0&#39; || *c == &#39;|&#39;) {
seg = (char*) malloc((seg_len + 1) * sizeof(char));
strncpy(seg, line_cursor, seg_len);
seg[seg_len] = &#39;\0&#39;;

struct process* new_proc = mysh_parse_command_segment(seg);
if (!root_proc) {
root_proc = new_proc;
proc = root_proc;
} else {
proc-&gt;next = new_proc;
proc = new_proc;
}

if (*c != &#39;\0&#39;) {
line_cursor = c;
while (*(++line_cursor) == &#39; &#39;);
c = line_cursor;
seg_len = 0;

continue;
} else {
break;
}
} else {
seg_len++;
c++;
}
}

struct job *new_job = (struct job*) malloc(sizeof(struct job));
new_job-&gt;root = root_proc;
new_job-&gt;command = command;
new_job-&gt;pgid = -1;
new_job-&gt;mode = mode;
return new_job;
}

char* mysh_read_line() {
int bufsize = COMMAND_BUFSIZE;
int position = 0;
char *buffer = malloc(sizeof(char) * bufsize);
int c;

if (!buffer) {
fprintf(stderr, &quot;aarthi: allocation error\n&quot;);
exit(EXIT_FAILURE);
}

while (1) {
c = getchar();

if (c == EOF || c == &#39;\n&#39;) {
buffer[position] = &#39;\0&#39;;

return buffer;
} else {
buffer[position] = c;
}
position++;

if (position &gt;= bufsize) {
bufsize += COMMAND_BUFSIZE;
buffer = realloc(buffer, bufsize);
if (!buffer) {
fprintf(stderr, &quot;aarthi: allocation error\n&quot;);
exit(EXIT_FAILURE);
}
}
}
}

void mysh_print_promt() {
printf(COLOR_GREEN &quot;%s&quot; COLOR_NONE &quot; in &quot; COLOR_YELLOW &quot;%s&quot;
COLOR_NONE &quot;\n&quot;, shell-&gt;cur_user, shell-&gt;cur_dir);
printf(COLOR_CYAN &quot;aarthi&gt;&quot; COLOR_NONE &quot; &quot;);
}

void mysh_print_welcome() {
printf(&quot;Welcome to my shell\n&quot;);
}

void mysh_loop() {
char *line;
struct job *job;
int status = 1;

while (1) {
mysh_print_promt();

line = mysh_read_line();
if (strlen(line) == 0) {
check_zombie();
continue;
}
job = mysh_parse_command(line);
status = mysh_launch_job(job);
}
}

void mysh_init() {
struct sigaction sigint_action = {
.sa_handler = &amp;sigint_handler,
.sa_flags = 0
};
sigemptyset(&amp;sigint_action.sa_mask);
sigaction(SIGINT, &amp;sigint_action, NULL);

signal(SIGQUIT, SIG_IGN);
signal(SIGTSTP, SIG_IGN);
signal(SIGTTIN, SIG_IGN);

pid_t pid = getpid();
setpgid(pid, pid);
tcsetpgrp(0, pid);

shell = (struct shell_info*) malloc(sizeof(struct shell_info));
getlogin_r(shell-&gt;cur_user, sizeof(shell-&gt;cur_user));

struct passwd *pw = getpwuid(getuid());
strcpy(shell-&gt;pw_dir, pw-&gt;pw_dir);

int i;
for (i = 0; i &lt; NR_JOBS; i++) {

shell-&gt;jobs[i] = NULL;
}

mysh_update_cwd_info();
}

int main(int argc, char **argv) {
mysh_init();
mysh_print_welcome();
mysh_loop();

return EXIT_SUCCESS;
}
